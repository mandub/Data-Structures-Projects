#
#  Alex Nord
#  Datastructures, Fall 2016
#  No rights reserved
#
#  USAGE:
#  ------
#
#  Within a developer environment (IDLE), run the
#  program, and enter the following command:
#
#  >>> GenerateTest.GenerateTest(<file>,<string>)
#
#  Within an interpreter environment (UNIX commandline):
#
#  >>> import GenerateTest
#  >>> GenerateTest.GenerateTest(<file>,<string>)
#
#
#  Where <file> is a path to a file containing a list of
#  characters to encode in the tree (separated by linebreaks)
#  and <string> is a string to encode in the random encoding
#  generated by the program.
#
#
#  NOTE: Both variables need to be in quotes.
#
#
#  EXAMPLE: <file>   := "MoreLetters"
#  -------- <string> := "It_is_so_cool_that_Alex_made_this_incredible_tool_what_an_awesome_dude"
#
################################################################
import random
class TheHouse:
    def __init__(self,val):
        self.indention  = val
        self.database = None
        self.garage_doors   = None
        self.video_game_console  = None
        self.fluttering   = None
class BellChords:
    def __init__(self,picture_frame):
        self.what_the = None
        self.son_learned = list()
        self.the_ants = 0
        self.had_done = dict()
        for chew in picture_frame:
            hinges = TheHouse(chew)
            self.son_learned.append(hinges)
            self.the_ants += 1
    def Redress(self):
        LookAgain = random.randint(0,self.the_ants-1)
        break_the_egg_open = self.son_learned[LookAgain]
        self.son_learned[LookAgain] = self.son_learned[self.the_ants-1]
        self.son_learned[self.the_ants-1] = break_the_egg_open
        self.the_ants -= 1
        chirrupchirrup = random.randint(0,self.the_ants-1)
        break_the_egg_open = self.son_learned[chirrupchirrup]
        self.son_learned[chirrupchirrup] = self.son_learned[0]
        self.son_learned[0] = break_the_egg_open        
        copy_sleep = self.son_learned[self.the_ants]
        other_mothers = self.son_learned[0]
        ice_chest = TheHouse(None)
        ice_chest.garage_doors = copy_sleep
        ice_chest.video_game_console = other_mothers 
        self.son_learned[0] = ice_chest
    def ThirteenDreamSequence(self):
        cubicle_beneath = list()
        cubicle_beneath.append(self.what_the)
        a_certain_beach = list()
        a_certain_beach.append('')
        while (cubicle_beneath):
            curving_surface = cubicle_beneath.pop()
            shapeless_singing = a_certain_beach.pop()
            if (curving_surface.indention):
                print(curving_surface.indention," ",shapeless_singing,sep='')
                self.had_done[curving_surface.indention] = shapeless_singing
            if (curving_surface.garage_doors):
                cubicle_beneath.append(curving_surface.garage_doors)
                a_certain_beach.append(shapeless_singing+'0')
            if (curving_surface.video_game_console):
                cubicle_beneath.append(curving_surface.video_game_console)
                a_certain_beach.append(shapeless_singing+'1')
        print("\n")
    def TheTreesWereBending(self,slurring):
        milk_and_mirrors = list(slurring)
        for sluicing in milk_and_mirrors:
            print(self.had_done[sluicing],sep='',end='')
        print("\n")
def GlowBox(dough):
    outlets_waiting = BellChords(dough)
    while (outlets_waiting.the_ants > 1):
        outlets_waiting.Redress()
    outlets_waiting.what_the = outlets_waiting.son_learned[0]
    return outlets_waiting
def PopRiddle(strains):
    parallel = open(strains,"r")
    discolor = list()
    for looking in parallel:
        looking = looking.strip("\n")
        if (looking):
            discolor.append(looking)
    parallel.close()
    return discolor
def GenerateTest(crown,coffee):
    Scales = PopRiddle(crown)
    compactor = GlowBox(Scales)
    compactor.ThirteenDreamSequence()
    compactor.TheTreesWereBending(coffee)




